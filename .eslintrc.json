{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "./tsconfig.json"
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    "plugins": [
        "@typescript-eslint"
    ],
    "settings": {
        "import/resolver": {
            "node": {
                "extensions": [
                    ".js",
                    ".jsx",
                    ".ts",
                    ".tsx",
                    ".d.ts"
                ]
            }
        }
    },
    "rules": {
        // https://eslint.org/docs/rules/
        // https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin

        "keyword-spacing": "warn", // we require this explicitly
        "space-in-parens": "warn", // default is error but warning should be sufficient
        "space-before-blocks": "warn", // default is error but warning should be sufficient
        "space-before-function-paren": ["warn", "always"], // we require this explicitly
        "no-multi-spaces": "off", // useful for manually align some expression across lines
        "prefer-spread": "off", // we need ES5 to be fast too
        "prefer-rest-params": "off", // we need ES5 to be fast too
        "camelcase": "off", // underscores may come in handy in some cases

        // TODO: this is just too much work
        "@typescript-eslint/explicit-module-boundary-types": "off",

        // TODO: sadly we still rely heavily on legacyCC
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",

        "@typescript-eslint/unbound-method": "off", // we exploit prototype methods sometimes to acheive better performace
        "@typescript-eslint/no-explicit-any": "off", // still relevant for some heavily templated usages
        "@typescript-eslint/no-empty-function": "off", // may become useful in some parent classes
        "@typescript-eslint/no-unused-vars": "off", // may become useful in some parent classes
        "@typescript-eslint/no-non-null-assertion": "off", // sometimes we just know better than the compiler
        "@typescript-eslint/no-namespace": ["warn", { // we need to declare static properties
            "allowDeclarations": true,
            "allowDefinitionFiles": true
        }],
        "@typescript-eslint/restrict-template-expressions": ["warn", { // concatenations of different types are common, e.g. hash calculations
            "allowNumber": true,
            "allowBoolean": true
        }]
    },
    "env": {
        "browser": true,
        "node": true,
        "es6": true,
        "jest": true
    },
    "globals": {
        "cc": false,
        "wx": false,
        "Editor": false,
        "_Scene": false,
        "_ccsg": false
    }
}
