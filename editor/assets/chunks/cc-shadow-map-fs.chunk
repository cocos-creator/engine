
in vec4 v_shadowPos;

#include <cc-shadow>
#include <packing>

#pragma builtin(global)
layout(set = 0, binding = 4) uniform sampler2D cc_shadowMap;

vec4 CCGetShadowFactorX1 () {
  vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;
  float depth = unpackRGBAToDepth(texture(cc_shadowMap, clipPos.xy));
  if (depth < (clipPos.z - 0.001)) return cc_shadowColor;
  else return vec4(0);
}

vec4 CCGetShadowFactorX5 () {
  vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;
  float offsetx = 1.0 / cc_shadowSize.x;
  float offsety = 1.0 / cc_shadowSize.y;
  float depth = 0.0;
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)));
  depth /= 5.0;
  if (depth < (clipPos.z - 0.001)) return cc_shadowColor;
  else return vec4(0);
}

vec4 CCGetShadowFactorX9 () {
  vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;
  float offsetx = 1.0 / cc_shadowSize.x;
  float offsety = 1.0 / cc_shadowSize.y;
  float depth = 0.0;
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y - offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y + offsety)));
  depth += unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)));
  depth /= 9.0;
  if (depth < (clipPos.z - 0.001)) return cc_shadowColor;
  else return vec4(0);
}
