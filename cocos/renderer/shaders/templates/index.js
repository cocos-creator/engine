export default [
  {
    name: 'gaussian-blur',
    vert: '\nattribute vec2 a_position;\nattribute vec2 a_uv0;\nvarying vec2 uv;\nvoid main() {\n  uv = a_uv0;\n  gl_Position = vec4(a_position.x, a_position.y, 0.0, 1.0);\n}',
    frag: '\nvarying vec2 uv;\nuniform sampler2D texture;\nuniform vec2 pixelSize;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat kGaussianBlur[10];\nfloat log_conv(float x0, float X, float y0, float Y) {\n  return ( X + log( x0 + (y0 * exp(Y - X) ) ) );\n}\nvoid main() {\n  kGaussianBlur[0] = 0.0882357;\n  kGaussianBlur[1] = 0.0957407;\n  kGaussianBlur[2] = 0.101786;\n  kGaussianBlur[3] = 0.106026;\n  kGaussianBlur[4] = 0.108212;\n  kGaussianBlur[5] = 0.108212;\n  kGaussianBlur[6] = 0.106026;\n  kGaussianBlur[7] = 0.101786;\n  kGaussianBlur[8] = 0.0957407;\n  kGaussianBlur[9] = 0.0882357;\n  float sample[10];\n  for (int i = 0; i < 10; ++i) {\n    float offset = float(i) - 4.5;\n    vec2 texCoord = vec2( uv.x + offset * pixelSize.x, uv.y + offset * pixelSize.y);\n    sample[i] = unpackRGBAToDepth(texture2D(texture, texCoord));\n  }\n  float sum = log_conv(kGaussianBlur[0], sample[0], kGaussianBlur[1], sample[1]);\n  for (int i = 2; i < 10; ++i) {\n    sum = log_conv(1.0, sum, kGaussianBlur[i], sample[i]);\n  }\n  gl_FragColor = packDepthToRGBA(sum);\n}\n',
    defines: [],
  },
  {
    name: 'grid',
    vert: '\nattribute vec2 a_uv0;\nattribute vec3 a_position;\nattribute vec3 a_normal;\nuniform mat4 model;\nuniform mat4 viewProj;\nvarying vec2 uv0;\nvarying vec4 pos_w;\n#if USE_WORLD_POS\n  uniform mat3 normalMatrix;\n  varying vec3 normal_w;\n#endif\nvoid main () {\n  uv0 = a_uv0;\n  pos_w = model * vec4(a_position, 1);\n  #if USE_WORLD_POS\n    normal_w = normalMatrix * a_normal;\n  #endif\n  gl_Position = viewProj * pos_w;\n}',
    frag: '\nvarying vec2 uv0;\nvarying vec4 pos_w;\n#if USE_WORLD_POS\n  varying vec3 normal_w;\n#endif\nuniform vec2 tiling;\nuniform vec3 baseColorWhite;\nuniform vec3 baseColorBlack;\nuniform sampler2D basePattern;\nuniform vec2 basePatternTiling;\nuniform vec2 basePatternOffset;\nuniform vec4 subPatternColor;\nuniform sampler2D subPattern;\nuniform vec2 subPatternTiling;\nuniform vec2 subPatternOffset;\nuniform vec4 subPatternColor2;\nuniform sampler2D subPattern2;\nuniform vec2 subPattern2Tiling;\nuniform vec2 subPattern2Offset;\nvoid main () {\n  vec2 uv = uv0 * tiling;\n  vec2 uvBase = uv * basePatternTiling + basePatternOffset;\n  vec2 uvSub = uv * subPatternTiling + subPatternOffset;\n  vec2 uvSub2 = uv * subPattern2Tiling + subPattern2Offset;\n  #if USE_WORLD_POS\n    vec3 dnormal_w = normalize(normal_w);\n    if (abs(dnormal_w.x)>0.5) { \n      uvBase = (pos_w.zy * tiling * basePatternTiling) + basePatternOffset;\n      uvSub = (pos_w.zy * tiling * subPatternTiling) + subPatternOffset;\n      uvSub2 = (pos_w.zy * tiling * subPattern2Tiling) + subPattern2Offset;\n    } else if (abs(dnormal_w.z)>0.5) { \n      uvBase = (pos_w.xy * tiling * basePatternTiling) + basePatternOffset;\n      uvSub = (pos_w.xy * tiling * subPatternTiling) + subPatternOffset;\n      uvSub2 = (pos_w.xy * tiling * subPattern2Tiling) + subPattern2Offset;\n    } else { \n      uvBase = (pos_w.xz * tiling * basePatternTiling) + basePatternOffset;\n      uvSub = (pos_w.xz * tiling * subPatternTiling) + subPatternOffset;\n      uvSub2 = (pos_w.xz * tiling * subPattern2Tiling) + subPattern2Offset;\n    }\n  #endif\n  vec4 texColBase = texture2D(basePattern, uvBase);\n  vec4 texColSub = texture2D(subPattern, uvSub);\n  vec4 texColSub2 = texture2D(subPattern2, uvSub2);\n  \n  \n  \n  vec4 color = vec4(baseColorWhite,1) * texColBase + vec4(baseColorBlack,1) * (1.0-texColBase);\n  color =\n    color * (1.0 - texColSub) +\n    (subPatternColor * subPatternColor.a + color * (1.0-subPatternColor.a)) * texColSub\n    ;\n  color =\n    color * (1.0 - texColSub2) +\n    (subPatternColor2 * subPatternColor2.a + color * (1.0-subPatternColor2.a)) * texColSub2\n    ;\n  \n  \n  gl_FragColor = color;\n}',
    defines: [
      { name: 'USE_WORLD_POS', },
    ],
  },
  {
    name: 'line',
    vert: '\nattribute vec3 a_position;\nattribute vec3 a_color;\nuniform mat4 model;\nuniform mat4 viewProj;\nvarying vec3 color;\nvoid main () {\n  vec4 pos = viewProj * model * vec4(a_position, 1);\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  color = a_color;\n  gl_Position = pos;\n}',
    frag: '\nvarying vec3 color;\nvoid main () {\n  gl_FragColor = vec4(color, 1.0);\n}',
    defines: [],
  },
  {
    name: 'matcap',
    vert: '\nattribute vec3 a_position;\nattribute vec3 a_normal;\nuniform   mat4 model;\nuniform   mat4 viewProj;\nuniform   mat3 normalMatrix;\nvarying   vec2 matcapUV;\n#if USE_MAIN_TEX\n  attribute vec2 a_uv0;\n  varying   vec2 uv0;\n#endif\n#if USE_SKINNING\n  \nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if USE_JOINTS_TEXTURE\nuniform sampler2D u_jointsTexture;\nuniform float u_jointsTextureSize;\nmat4 getBoneMatrix(const in float i) {\n  float size = u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n  y = dy * (y + 0.5);\n  vec4 v1 = texture2D(u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(u_jointsTexture, vec2(dx * (x + 3.5), y));\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 u_jointMatrices[128];\nmat4 getBoneMatrix(const in float i) {\n  return u_jointMatrices[int(i)];\n}\n#endif\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n#endif\nvoid main(void){\n  #if USE_MAIN_TEX\n    uv0 = a_uv0;\n  #endif\n  vec4 pos = vec4(a_position, 1);\n  #if USE_SKINNING\n    mat4 skinMat = skinMatrix();\n    pos = skinMat * pos;\n  #endif\n  pos = viewProj * model * pos;\n  gl_Position = pos;\n  vec4 normal = vec4(a_normal, 0);\n  #if USE_SKINNING\n    normal = skinMat * normal;\n  #endif\n  normal = vec4(normalize(normalMatrix * normal.xyz), 0);\n  matcapUV = normal.xy;\n  matcapUV = matcapUV * 0.5 + 0.5;\n}',
    frag: '\nprecision mediump float;\nuniform sampler2D matcapTex;\nuniform float colorFactor;\nuniform vec4 color;\nvarying vec2 matcapUV;\n#if USE_MAIN_TEX\n  varying vec2 uv0;\n  uniform sampler2D mainTex;\n#endif\nvoid main(void){\n  vec4 col = vec4(1, 1, 1, 1);\n  col *= color;\n  #if USE_MAIN_TEX\n    col *= texture2D(mainTex, uv0);\n  #endif\n  vec4 matcapColor = texture2D(matcapTex, matcapUV);\n  gl_FragColor = col * colorFactor + matcapColor * (1.0 - colorFactor);\n}',
    defines: [
      { name: 'USE_MAIN_TEX', },
      { name: 'USE_SKINNING', },
    ],
  },
  {
    name: 'particle-add-gpu',
    vert: '\n\n\nuniform vec2 frameTile;\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  uniform mat4 view;\n#endif\n#if USE_STRETCHED_BILLBOARD\n  uniform vec3 eye;\n  uniform float velocityScale;\n  uniform float lengthScale;\n#endif\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n  aniUV.y = frameTile.y - aniUV.y - 1.0;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\n#define MAX_KEY_NUM 8\n#define CURVE_MODE_CONSTANT 0\n#define CURVE_MODE_RANDOM_CONSTANT 1\n#define CURVE_MODE_CURVE 2\n#define CURVE_MODE_RANDOM_CURVE 3\n#define GRADIENT_MODE_FIX 0\n#define GRADIENT_MODE_BLEND 1\n#define GRADIENT_RANGE_MODE_COLOR 0\n#define GRADIENT_RANGE_MODE_TWO_COLOR 1\n#define GRADIENT_RANGE_MODE_RANDOM_COLOR 2\n#define GRADIENT_RANGE_MODE_GRADIENT 3\n#define GRADIENT_RANGE_MODE_TWO_GRADIENT 4\n#define SIMULATE_SPACE_LOCAL 0\n#define SIMULATE_SPACE_WORLD 1\n#define ANIMATION_MODE_WHOLE_SHEET 0\n#define ANIMATION_MODE_SINGLE_ROW 1\n#define COLOR_OVERTIME_RAND_OFFSET 91041.\n#define FORCE_OVERTIME_RAND_OFFSET 212165.\n#define ROTATION_OVERTIME_RAND_OFFSET 125292.\n#define SIZE_OVERTIME_RAND_OFFSET 39825.\n#define TEXTURE_ANIMATION_RAND_OFFSET 90794.\n#define VELOCITY_OVERTIME_RAND_OFFSET 197866.\n#define DECL_CURVE_STRUCT(name)   uniform int u_##name##_curveMode;   uniform float u_##name##_minConstant;   uniform float u_##name##_maxConstant;   uniform vec4 u_##name##_minKeyCoef[MAX_KEY_NUM];   uniform float u_##name##_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_##name##_maxKeyCoef[MAX_KEY_NUM];   uniform float u_##name##_maxKeyTime[MAX_KEY_NUM];\n#define DECL_CURVE_STRUCT_INT(name)   uniform int u_##name##_curveMode;   uniform float u_##name##_minConstant;   uniform float u_##name##_maxConstant;   uniform vec4 u_##name##_minKeyCoef[MAX_KEY_NUM];   uniform float u_##name##_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_##name##_maxKeyCoef[MAX_KEY_NUM];   uniform float u_##name##_maxKeyTime[MAX_KEY_NUM];   uniform float u_##name##_minIntegral[MAX_KEY_NUM - 1];   uniform float u_##name##_maxIntegral[MAX_KEY_NUM - 1];\n#define DECL_GRADIENT_STRUCT(name)   uniform int u_##name##_rangeMode;   uniform vec4 u_##name##_minColor;   uniform vec4 u_##name##_maxColor;   uniform int u_##name##_minGradMode;   uniform vec3 u_##name##_minColorKeyValue[MAX_KEY_NUM];   uniform float u_##name##_minColorKeyTime[MAX_KEY_NUM];   uniform float u_##name##_minAlphaKeyValue[MAX_KEY_NUM];   uniform float u_##name##_minAlphaKeyTime[MAX_KEY_NUM];   uniform int u_##name##_maxGradMode;   uniform vec3 u_##name##_maxColorKeyValue[MAX_KEY_NUM];   uniform float u_##name##_maxColorKeyTime[MAX_KEY_NUM];   uniform float u_##name##_maxAlphaKeyValue[MAX_KEY_NUM];   uniform float u_##name##_maxAlphaKeyTime[MAX_KEY_NUM];\n#define EVAL_CURVE_RANGE(name, t, rnd)   evaluateCurveRange(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, t, rnd)\n#define EVAL_CURVE_INTEGRAL(name, t, ts, rnd)   evaluateCurveRangeIntegral(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_minIntegral, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, u_##name##_maxIntegral, t, ts, rnd)\n#define EVAL_CURVE_INTEGRAL_TWICE(name, t, ts, rnd)   evaluateCurveRangeIntegralTwice(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_minIntegral, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, u_##name##_maxIntegral, t, ts, rnd)\n#define EVAL_GRADIENT_RANGE(name, t, rnd)   evaluateGradientRange(u_##name##_rangeMode, u_##name##_minColor, u_##name##_maxColor,   u_##name##_minGradMode, u_##name##_minColorKeyValue, u_##name##_minColorKeyTime, u_##name##_minAlphaKeyValue, u_##name##_minAlphaKeyTime,   u_##name##_maxGradMode, u_##name##_maxColorKeyValue, u_##name##_maxColorKeyTime, u_##name##_maxAlphaKeyValue, u_##name##_maxAlphaKeyTime, t, rnd);\nattribute vec4 a_position_starttime; \nattribute vec4 a_vertIdx_size_angle;  \nattribute vec4 a_color;\nattribute vec4 a_dir_life;  \nattribute float a_rndSeed;\nuniform float u_psTime;\nuniform vec4 u_worldRot;\n#if VELOCITY_OVERTIME_MODULE_ENABLE\nuniform int u_velocity_space;\nuniform float u_speedModifier;\nuniform int u_velocity_pos_x_curveMode;   uniform float u_velocity_pos_x_minConstant;   uniform float u_velocity_pos_x_maxConstant;   uniform vec4 u_velocity_pos_x_minKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_pos_x_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_velocity_pos_x_maxKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_pos_x_maxKeyTime[MAX_KEY_NUM];   uniform float u_velocity_pos_x_minIntegral[MAX_KEY_NUM - 1];   uniform float u_velocity_pos_x_maxIntegral[MAX_KEY_NUM - 1];\nuniform int u_velocity_pos_y_curveMode;   uniform float u_velocity_pos_y_minConstant;   uniform float u_velocity_pos_y_maxConstant;   uniform vec4 u_velocity_pos_y_minKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_pos_y_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_velocity_pos_y_maxKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_pos_y_maxKeyTime[MAX_KEY_NUM];   uniform float u_velocity_pos_y_minIntegral[MAX_KEY_NUM - 1];   uniform float u_velocity_pos_y_maxIntegral[MAX_KEY_NUM - 1];\nuniform int u_velocity_pos_z_curveMode;   uniform float u_velocity_pos_z_minConstant;   uniform float u_velocity_pos_z_maxConstant;   uniform vec4 u_velocity_pos_z_minKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_pos_z_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_velocity_pos_z_maxKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_pos_z_maxKeyTime[MAX_KEY_NUM];   uniform float u_velocity_pos_z_minIntegral[MAX_KEY_NUM - 1];   uniform float u_velocity_pos_z_maxIntegral[MAX_KEY_NUM - 1];\n  #if USE_STRETCHED_BILLBOARD\n    uniform int u_velocity_x_curveMode;   uniform float u_velocity_x_minConstant;   uniform float u_velocity_x_maxConstant;   uniform vec4 u_velocity_x_minKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_x_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_velocity_x_maxKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_x_maxKeyTime[MAX_KEY_NUM];\n    uniform int u_velocity_y_curveMode;   uniform float u_velocity_y_minConstant;   uniform float u_velocity_y_maxConstant;   uniform vec4 u_velocity_y_minKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_y_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_velocity_y_maxKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_y_maxKeyTime[MAX_KEY_NUM];\n    uniform int u_velocity_z_curveMode;   uniform float u_velocity_z_minConstant;   uniform float u_velocity_z_maxConstant;   uniform vec4 u_velocity_z_minKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_z_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_velocity_z_maxKeyCoef[MAX_KEY_NUM];   uniform float u_velocity_z_maxKeyTime[MAX_KEY_NUM];\n  #endif\n#endif\n#if FORCE_OVERTIME_MODULE_ENABLE\nuniform int u_force_space;\nuniform int u_force_pos_x_curveMode;   uniform float u_force_pos_x_minConstant;   uniform float u_force_pos_x_maxConstant;   uniform vec4 u_force_pos_x_minKeyCoef[MAX_KEY_NUM];   uniform float u_force_pos_x_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_force_pos_x_maxKeyCoef[MAX_KEY_NUM];   uniform float u_force_pos_x_maxKeyTime[MAX_KEY_NUM];   uniform float u_force_pos_x_minIntegral[MAX_KEY_NUM - 1];   uniform float u_force_pos_x_maxIntegral[MAX_KEY_NUM - 1];\nuniform int u_force_pos_y_curveMode;   uniform float u_force_pos_y_minConstant;   uniform float u_force_pos_y_maxConstant;   uniform vec4 u_force_pos_y_minKeyCoef[MAX_KEY_NUM];   uniform float u_force_pos_y_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_force_pos_y_maxKeyCoef[MAX_KEY_NUM];   uniform float u_force_pos_y_maxKeyTime[MAX_KEY_NUM];   uniform float u_force_pos_y_minIntegral[MAX_KEY_NUM - 1];   uniform float u_force_pos_y_maxIntegral[MAX_KEY_NUM - 1];\nuniform int u_force_pos_z_curveMode;   uniform float u_force_pos_z_minConstant;   uniform float u_force_pos_z_maxConstant;   uniform vec4 u_force_pos_z_minKeyCoef[MAX_KEY_NUM];   uniform float u_force_pos_z_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_force_pos_z_maxKeyCoef[MAX_KEY_NUM];   uniform float u_force_pos_z_maxKeyTime[MAX_KEY_NUM];   uniform float u_force_pos_z_minIntegral[MAX_KEY_NUM - 1];   uniform float u_force_pos_z_maxIntegral[MAX_KEY_NUM - 1];\n  #if USE_STRETCHED_BILLBOARD\n    uniform int u_force_vel_x_curveMode;   uniform float u_force_vel_x_minConstant;   uniform float u_force_vel_x_maxConstant;   uniform vec4 u_force_vel_x_minKeyCoef[MAX_KEY_NUM];   uniform float u_force_vel_x_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_force_vel_x_maxKeyCoef[MAX_KEY_NUM];   uniform float u_force_vel_x_maxKeyTime[MAX_KEY_NUM];   uniform float u_force_vel_x_minIntegral[MAX_KEY_NUM - 1];   uniform float u_force_vel_x_maxIntegral[MAX_KEY_NUM - 1];\n    uniform int u_force_vel_y_curveMode;   uniform float u_force_vel_y_minConstant;   uniform float u_force_vel_y_maxConstant;   uniform vec4 u_force_vel_y_minKeyCoef[MAX_KEY_NUM];   uniform float u_force_vel_y_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_force_vel_y_maxKeyCoef[MAX_KEY_NUM];   uniform float u_force_vel_y_maxKeyTime[MAX_KEY_NUM];   uniform float u_force_vel_y_minIntegral[MAX_KEY_NUM - 1];   uniform float u_force_vel_y_maxIntegral[MAX_KEY_NUM - 1];\n    uniform int u_force_vel_z_curveMode;   uniform float u_force_vel_z_minConstant;   uniform float u_force_vel_z_maxConstant;   uniform vec4 u_force_vel_z_minKeyCoef[MAX_KEY_NUM];   uniform float u_force_vel_z_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_force_vel_z_maxKeyCoef[MAX_KEY_NUM];   uniform float u_force_vel_z_maxKeyTime[MAX_KEY_NUM];   uniform float u_force_vel_z_minIntegral[MAX_KEY_NUM - 1];   uniform float u_force_vel_z_maxIntegral[MAX_KEY_NUM - 1];\n  #endif\n#endif\n#if SIZE_OVERTIME_MODULE_ENABLE\nuniform int u_size_curveMode;   uniform float u_size_minConstant;   uniform float u_size_maxConstant;   uniform vec4 u_size_minKeyCoef[MAX_KEY_NUM];   uniform float u_size_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_size_maxKeyCoef[MAX_KEY_NUM];   uniform float u_size_maxKeyTime[MAX_KEY_NUM];\n#endif\n#if COLOR_OVERTIME_MODULE_ENABLE\nuniform int u_color_rangeMode;   uniform vec4 u_color_minColor;   uniform vec4 u_color_maxColor;   uniform int u_color_minGradMode;   uniform vec3 u_color_minColorKeyValue[MAX_KEY_NUM];   uniform float u_color_minColorKeyTime[MAX_KEY_NUM];   uniform float u_color_minAlphaKeyValue[MAX_KEY_NUM];   uniform float u_color_minAlphaKeyTime[MAX_KEY_NUM];   uniform int u_color_maxGradMode;   uniform vec3 u_color_maxColorKeyValue[MAX_KEY_NUM];   uniform float u_color_maxColorKeyTime[MAX_KEY_NUM];   uniform float u_color_maxAlphaKeyValue[MAX_KEY_NUM];   uniform float u_color_maxAlphaKeyTime[MAX_KEY_NUM];\n#endif\n#if TEXTURE_ANIMATION_ENABLE\nuniform int u_frameOverTime_curveMode;   uniform float u_frameOverTime_minConstant;   uniform float u_frameOverTime_maxConstant;   uniform vec4 u_frameOverTime_minKeyCoef[MAX_KEY_NUM];   uniform float u_frameOverTime_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_frameOverTime_maxKeyCoef[MAX_KEY_NUM];   uniform float u_frameOverTime_maxKeyTime[MAX_KEY_NUM];\nuniform float u_cycles;\nuniform int u_animation_mode;\nuniform bool u_random_row;\nuniform int u_row_index;\n#endif\n#if ROTATE_OVERTIME_MODULE_ENABLE\nuniform int u_rotate_curveMode;   uniform float u_rotate_minConstant;   uniform float u_rotate_maxConstant;   uniform vec4 u_rotate_minKeyCoef[MAX_KEY_NUM];   uniform float u_rotate_minKeyTime[MAX_KEY_NUM];   uniform vec4 u_rotate_maxKeyCoef[MAX_KEY_NUM];   uniform float u_rotate_maxKeyTime[MAX_KEY_NUM];   uniform float u_rotate_minIntegral[MAX_KEY_NUM - 1];   uniform float u_rotate_maxIntegral[MAX_KEY_NUM - 1];\n#endif\nfloat repeat(float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat(vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nfloat random(float seed) {\n  seed = mod(seed, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n}\nfloat calcCurveValue(vec4 coef, float t) {\n  return t * (t * (t * coef.x + coef.y) + coef.z) + coef.w;\n}\nfloat evaluateCurve(float keyTime[MAX_KEY_NUM], vec4 keyCoef[MAX_KEY_NUM], float normalizedTime) {\n  for (int i = 0; i < MAX_KEY_NUM; i++) {\n    if (keyTime[i] > normalizedTime) {\n      return calcCurveValue(keyCoef[i], normalizedTime - (i == 0 ? 0. : keyTime[i - 1]));\n    }\n  }\n}\nfloat evaluateIntegral(float keyTime[MAX_KEY_NUM], vec4 keyCoef[MAX_KEY_NUM], float integral[MAX_KEY_NUM - 1], float normalizedTime, float ts) {\n  for (int i = 0; i < MAX_KEY_NUM; i++) {\n    if (keyTime[i] > normalizedTime) {\n      float t = normalizedTime - (i == 0 ? 0. : keyTime[i - 1]);\n      return ts * ((i - 1 < 0 ? 0. : integral[i - 1]) + t * calcCurveValue(keyCoef[i], t));\n    }\n  }\n}\nfloat evaluateIntegralTwice(float keyTime[MAX_KEY_NUM], vec4 keyCoef[MAX_KEY_NUM], float integral[MAX_KEY_NUM - 1], float normalizedTime, float ts) {\n  for (int i = 0; i < MAX_KEY_NUM; i++) {\n    if (keyTime[i] > normalizedTime) {\n      float t = normalizedTime - (i == 0 ? 0. : keyTime[i - 1]);\n      return ts * ts * ((i - 1 < 0 ? 0. : integral[i - 1]) + t * t * calcCurveValue(keyCoef[i], t));\n    }\n  }\n}\nfloat evaluateCurveRange(int mode, float minConstant, float maxConstant\n  , float minKeyTime[MAX_KEY_NUM], vec4 minKeyCoef[MAX_KEY_NUM]\n  , float maxKeyTime[MAX_KEY_NUM], vec4 maxKeyCoef[MAX_KEY_NUM]\n  , float t, float rnd) {\n  if (mode == CURVE_MODE_CONSTANT) {\n    return minConstant;\n  } else if (mode == CURVE_MODE_RANDOM_CONSTANT) {\n    return mix(minConstant, maxConstant, random(rnd));\n  } else if (mode == CURVE_MODE_CURVE) {\n    return evaluateCurve(minKeyTime, minKeyCoef, t);\n  } else if (mode == CURVE_MODE_RANDOM_CURVE) {\n    return mix(evaluateCurve(minKeyTime, minKeyCoef, t), evaluateCurve(maxKeyTime, maxKeyCoef, t), random(rnd));\n  }\n}\nfloat evaluateCurveRangeIntegral(int mode, float minConstant, float maxConstant\n  , float minKeyTime[MAX_KEY_NUM], vec4 minKeyCoef[MAX_KEY_NUM], float minIntegral[MAX_KEY_NUM - 1]\n  , float maxKeyTime[MAX_KEY_NUM], vec4 maxKeyCoef[MAX_KEY_NUM], float maxIntegral[MAX_KEY_NUM - 1]\n  , float t, float ts, float rnd) {\n  if (mode == CURVE_MODE_CONSTANT) {\n    return minConstant * t * ts;\n  } else if (mode == CURVE_MODE_RANDOM_CONSTANT) {\n    return mix(minConstant, maxConstant, random(rnd)) * t * ts;\n  } else if (mode == CURVE_MODE_CURVE) {\n    return evaluateIntegral(minKeyTime, minKeyCoef, minIntegral, t, ts);\n  } else if (mode == CURVE_MODE_RANDOM_CURVE) {\n    return mix(evaluateIntegral(minKeyTime, minKeyCoef, minIntegral, t, ts), evaluateIntegral(maxKeyTime, maxKeyCoef, maxIntegral, t, ts), random(rnd));\n  }\n}\nfloat evaluateCurveRangeIntegralTwice(int mode, float minConstant, float maxConstant\n  , float minKeyTime[MAX_KEY_NUM], vec4 minKeyCoef[MAX_KEY_NUM], float minIntegral[MAX_KEY_NUM - 1]\n  , float maxKeyTime[MAX_KEY_NUM], vec4 maxKeyCoef[MAX_KEY_NUM], float maxIntegral[MAX_KEY_NUM - 1]\n  , float t, float ts, float rnd) {\n  if (mode == CURVE_MODE_CONSTANT) {\n    return minConstant * t * t * ts * ts / 2.;\n  } else if (mode == CURVE_MODE_RANDOM_CONSTANT) {\n    return mix(minConstant, maxConstant, random(rnd)) * t * t * ts * ts / 2.;\n  } else if (mode == CURVE_MODE_CURVE) {\n    return evaluateIntegralTwice(minKeyTime, minKeyCoef, minIntegral, t, ts);\n  } else if (mode == CURVE_MODE_RANDOM_CURVE) {\n    return mix(evaluateIntegralTwice(minKeyTime, minKeyCoef, minIntegral, t, ts), evaluateIntegralTwice(maxKeyTime, maxKeyCoef, maxIntegral, t, ts), random(rnd));\n  }\n}\nvec4 evaluateGradient(int mode, float colorKeyTime[MAX_KEY_NUM], vec3 colorKeyValue[MAX_KEY_NUM]\n  , float alphaKeyTime[MAX_KEY_NUM], float alphaKeyValue[MAX_KEY_NUM]\n  , float t){\n  vec4 ret;\n  for (int i = 0; i < MAX_KEY_NUM; i++) {\n    if (t < colorKeyTime[i]) {\n      if (mode == GRADIENT_MODE_FIX) {\n        ret.xyz = colorKeyValue[i];\n      } else if (mode == GRADIENT_MODE_BLEND) {\n        ret.xyz = mix(colorKeyValue[i - 1], colorKeyValue[i], (t - colorKeyTime[i - 1]) / (colorKeyTime[i] - colorKeyTime[i - 1]));\n      }\n      break;\n    }\n  }\n  for (int i = 0; i < MAX_KEY_NUM; i++) {\n    if (t < alphaKeyTime[i]) {\n      if (mode == GRADIENT_MODE_FIX) {\n        ret.w = alphaKeyValue[i];\n      } else if (mode == GRADIENT_MODE_BLEND) {\n        ret.w = mix(alphaKeyValue[i - 1], alphaKeyValue[i], (t - alphaKeyTime[i - 1]) / (alphaKeyTime[i] - alphaKeyTime[i - 1]));\n      }\n      break;\n    }\n  }\n  return ret;\n}\nvec4 evaluateGradientRange(int rangeMode, vec4 minColor, vec4 maxColor,\n  int minGradMode, vec3 minColorKeyValue[MAX_KEY_NUM], float minColorKeyTime[MAX_KEY_NUM], float minAlphaKeyValue[MAX_KEY_NUM], float minAlphaKeyTime[MAX_KEY_NUM],\n  int maxGradMode, vec3 maxColorKeyValue[MAX_KEY_NUM], float maxColorKeyTime[MAX_KEY_NUM], float maxAlphaKeyValue[MAX_KEY_NUM], float maxAlphaKeyTime[MAX_KEY_NUM],\n  float t, float rnd){\n  if (rangeMode == GRADIENT_RANGE_MODE_COLOR) {\n    return minColor;\n  } else if (rangeMode == GRADIENT_RANGE_MODE_TWO_COLOR) {\n    return mix(minColor, maxColor, rnd);\n  } else if (rangeMode == GRADIENT_RANGE_MODE_GRADIENT) {\n    return evaluateGradient(minGradMode, minColorKeyTime, minColorKeyValue, minAlphaKeyTime, minAlphaKeyValue, t);\n  } else if (rangeMode == GRADIENT_RANGE_MODE_TWO_GRADIENT) {\n    return mix(evaluateGradient(minGradMode, minColorKeyTime, minColorKeyValue, minAlphaKeyTime, minAlphaKeyValue, t),\n      evaluateGradient(maxGradMode, maxColorKeyTime, maxColorKeyValue, maxAlphaKeyTime, maxAlphaKeyValue, t), rnd);\n  }\n}\nvoid gpvs_main() {\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  float activeTime = u_psTime - a_position_starttime.w;\n  float normalizedTime = activeTime / a_dir_life.w;\n#if VELOCITY_OVERTIME_MODULE_ENABLE\n  float speedModifier = u_speedModifier;\n#else\n  float speedModifier = 1.;\n#endif\n  pos.xyz += a_dir_life.xyz * activeTime * speedModifier;\n#if USE_STRETCHED_BILLBOARD\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  velocity *= speedModifier;\n#endif\n#if !USE_WORLD_SPACE\n  pos = model * pos;\n  #if USE_STRETCHED_BILLBOARD\n    velocity = rotateQuat(velocity, u_worldRot);\n  #endif\n#endif\n#if VELOCITY_OVERTIME_MODULE_ENABLE\n  vec4 velocityTrack = vec4(evaluateCurveRangeIntegral(u_velocity_pos_x_curveMode, u_velocity_pos_x_minConstant, u_velocity_pos_x_maxConstant, u_velocity_pos_x_minKeyTime, u_velocity_pos_x_minKeyCoef, u_velocity_pos_x_minIntegral, u_velocity_pos_x_maxKeyTime, u_velocity_pos_x_maxKeyCoef, u_velocity_pos_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+VELOCITY_OVERTIME_RAND_OFFSET), evaluateCurveRangeIntegral(u_velocity_pos_y_curveMode, u_velocity_pos_y_minConstant, u_velocity_pos_y_maxConstant, u_velocity_pos_y_minKeyTime, u_velocity_pos_y_minKeyCoef, u_velocity_pos_y_minIntegral, u_velocity_pos_y_maxKeyTime, u_velocity_pos_y_maxKeyCoef, u_velocity_pos_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+VELOCITY_OVERTIME_RAND_OFFSET), evaluateCurveRangeIntegral(u_velocity_pos_z_curveMode, u_velocity_pos_z_minConstant, u_velocity_pos_z_maxConstant, u_velocity_pos_z_minKeyTime, u_velocity_pos_z_minKeyCoef, u_velocity_pos_z_minIntegral, u_velocity_pos_z_maxKeyTime, u_velocity_pos_z_maxKeyCoef, u_velocity_pos_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+VELOCITY_OVERTIME_RAND_OFFSET), 0);\n  velocityTrack = velocityTrack * speedModifier;\n  if (u_velocity_space == SIMULATE_SPACE_LOCAL) {\n    velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n  }\n  pos += velocityTrack;\n  #if USE_STRETCHED_BILLBOARD\n    vec4 velocityVel = vec4(evaluateCurveRange(u_velocity_x_curveMode, u_velocity_x_minConstant, u_velocity_x_maxConstant, u_velocity_x_minKeyTime, u_velocity_x_minKeyCoef, u_velocity_x_maxKeyTime, u_velocity_x_maxKeyCoef, normalizedTime, a_dir_life.w), evaluateCurveRange(u_velocity_y_curveMode, u_velocity_y_minConstant, u_velocity_y_maxConstant, u_velocity_y_minKeyTime, u_velocity_y_minKeyCoef, u_velocity_y_maxKeyTime, u_velocity_y_maxKeyCoef, normalizedTime, a_dir_life.w), evaluateCurveRange(u_velocity_z_curveMode, u_velocity_z_minConstant, u_velocity_z_maxConstant, u_velocity_z_minKeyTime, u_velocity_z_minKeyCoef, u_velocity_z_maxKeyTime, u_velocity_z_maxKeyCoef, normalizedTime, a_dir_life.w), 0);\n    if (u_velocity_space == SIMULATE_SPACE_LOCAL) {\n      velocityVel = rotateQuat(velocityVel, u_worldRot);\n    }\n    velocityVel *= speedModifier;\n    velocity += velocityVel;\n  #endif\n#endif\n#if FORCE_OVERTIME_MODULE_ENABLE\n  vec4 forceTrack = vec4(evaluateCurveRangeIntegralTwice(u_force_pos_x_curveMode, u_force_pos_x_minConstant, u_force_pos_x_maxConstant, u_force_pos_x_minKeyTime, u_force_pos_x_minKeyCoef, u_force_pos_x_minIntegral, u_force_pos_x_maxKeyTime, u_force_pos_x_maxKeyCoef, u_force_pos_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+FORCE_OVERTIME_RAND_OFFSET), evaluateCurveRangeIntegralTwice(u_force_pos_y_curveMode, u_force_pos_y_minConstant, u_force_pos_y_maxConstant, u_force_pos_y_minKeyTime, u_force_pos_y_minKeyCoef, u_force_pos_y_minIntegral, u_force_pos_y_maxKeyTime, u_force_pos_y_maxKeyCoef, u_force_pos_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+FORCE_OVERTIME_RAND_OFFSET), evaluateCurveRangeIntegralTwice(u_force_pos_z_curveMode, u_force_pos_z_minConstant, u_force_pos_z_maxConstant, u_force_pos_z_minKeyTime, u_force_pos_z_minKeyCoef, u_force_pos_z_minIntegral, u_force_pos_z_maxKeyTime, u_force_pos_z_maxKeyCoef, u_force_pos_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+FORCE_OVERTIME_RAND_OFFSET), 0);\n  forceTrack = forceTrack * speedModifier;\n  if (u_force_space == SIMULATE_SPACE_LOCAL) {\n    forceTrack = rotateQuat(forceTrack, u_worldRot);\n  }\n  pos += forceTrack;\n  #if USE_STRETCHED_BILLBOARD\n    vec4 forceVel = vec4(evaluateCurveRangeIntegral(u_force_vel_x_curveMode, u_force_vel_x_minConstant, u_force_vel_x_maxConstant, u_force_vel_x_minKeyTime, u_force_vel_x_minKeyCoef, u_force_vel_x_minIntegral, u_force_vel_x_maxKeyTime, u_force_vel_x_maxKeyCoef, u_force_vel_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+FORCE_OVERTIME_RAND_OFFSET), evaluateCurveRangeIntegral(u_force_vel_y_curveMode, u_force_vel_y_minConstant, u_force_vel_y_maxConstant, u_force_vel_y_minKeyTime, u_force_vel_y_minKeyCoef, u_force_vel_y_minIntegral, u_force_vel_y_maxKeyTime, u_force_vel_y_maxKeyCoef, u_force_vel_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+FORCE_OVERTIME_RAND_OFFSET), evaluateCurveRangeIntegral(u_force_vel_z_curveMode, u_force_vel_z_minConstant, u_force_vel_z_maxConstant, u_force_vel_z_minKeyTime, u_force_vel_z_minKeyCoef, u_force_vel_z_minIntegral, u_force_vel_z_maxKeyTime, u_force_vel_z_maxKeyCoef, u_force_vel_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+FORCE_OVERTIME_RAND_OFFSET), 0);\n    if (u_force_space == SIMULATE_SPACE_LOCAL) {\n      forceVel = rotateQuat(forceVel, u_worldRot);\n    }\n    forceVel *= speedModifier;\n    velocity += forceVel;\n  #endif\n#endif\n  float size = a_vertIdx_size_angle.z;\n#if SIZE_OVERTIME_MODULE_ENABLE\n  float sizeModifier = evaluateCurveRange(u_size_curveMode, u_size_minConstant, u_size_maxConstant, u_size_minKeyTime, u_size_minKeyCoef, u_size_maxKeyTime, u_size_maxKeyCoef, normalizedTime, a_rndSeed+SIZE_OVERTIME_RAND_OFFSET);\n  size *= sizeModifier;\n#endif\n  vec2 cornerOffset = vec2((a_vertIdx_size_angle.xy - 0.5) * size);\n#if !USE_STRETCHED_BILLBOARD\n  float angle = a_vertIdx_size_angle.w;\n  #if ROTATE_OVERTIME_MODULE_ENABLE\n    angle += evaluateCurveRangeIntegral(u_rotate_curveMode, u_rotate_minConstant, u_rotate_maxConstant, u_rotate_minKeyTime, u_rotate_minKeyCoef, u_rotate_minIntegral, u_rotate_maxKeyTime, u_rotate_maxKeyCoef, u_rotate_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+ROTATION_OVERTIME_RAND_OFFSET);\n  #endif\n  rotateCorner(cornerOffset, angle);\n#endif\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , view\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , eye\n    , velocity\n    , velocityScale\n    , lengthScale\n    , size\n    , a_vertIdx_size_angle.x\n  #endif\n  );\n  pos = viewProj * pos;\n  float frameIndex = 0.;\n#if TEXTURE_ANIMATION_ENABLE\n  if (u_animation_mode == ANIMATION_MODE_WHOLE_SHEET) {\n    frameIndex = repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+TEXTURE_ANIMATION_RAND_OFFSET), 1.);\n  } else if (u_animation_mode == ANIMATION_MODE_SINGLE_ROW) {\n    float rowLength = 1. / frameTile.y;\n    if (u_random_row) {\n      float f = repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+TEXTURE_ANIMATION_RAND_OFFSET), 1.);\n      float startRow = floor(random(floor(u_psTime * 1000.)) * frameTile.y);\n      float from = startRow * rowLength;\n      float to = from + rowLength;\n      frameIndex = mix(from, to, f);\n    }\n    else {\n      float from = float(u_row_index) * rowLength;\n      float to = from + rowLength;\n      frameIndex = mix(from, to, repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+TEXTURE_ANIMATION_RAND_OFFSET), 1.));\n    }\n  }\n#endif\n  uv = computeUV(frameIndex, a_vertIdx_size_angle.xy, frameTile) * mainTiling + mainOffset;\n#if COLOR_OVERTIME_MODULE_ENABLE\n  color = a_color * evaluateGradientRange(u_color_rangeMode, u_color_minColor, u_color_maxColor,   u_color_minGradMode, u_color_minColorKeyValue, u_color_minColorKeyTime, u_color_minAlphaKeyValue, u_color_minAlphaKeyTime,   u_color_maxGradMode, u_color_maxColorKeyValue, u_color_maxColorKeyTime, u_color_maxAlphaKeyValue, u_color_maxAlphaKeyTime, normalizedTime, a_rndSeed+COLOR_OVERTIME_RAND_OFFSET);;\n#else\n  color = a_color;\n#endif\n  gl_Position = pos;\n}\nvoid main () {\n  gpvs_main();\n}',
    frag: '\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvarying vec2 uv;\nvarying vec4 color;\nvoid main () {\n  \n  gl_FragColor = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n}',
    defines: [
      { name: 'USE_SOFT_PARTICLE', },
      { name: 'USE_BILLBOARD', },
      { name: 'USE_STRETCHED_BILLBOARD', },
      { name: 'USE_HORIZONTAL_BILLBOARD', },
      { name: 'USE_VERTICAL_BILLBOARD', },
      { name: 'USE_WORLD_SPACE', },
      { name: 'VELOCITY_OVERTIME_MODULE_ENABLE', },
      { name: 'FORCE_OVERTIME_MODULE_ENABLE', },
      { name: 'SIZE_OVERTIME_MODULE_ENABLE', },
      { name: 'COLOR_OVERTIME_MODULE_ENABLE', },
      { name: 'TEXTURE_ANIMATION_ENABLE', },
      { name: 'ROTATE_OVERTIME_MODULE_ENABLE', },
    ],
  },
  {
    name: 'particle-add-multiply',
    vert: '\n\nuniform vec2 frameTile;\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  uniform mat4 view;\n#endif\n#if USE_STRETCHED_BILLBOARD\n  uniform vec3 eye;\n  uniform float velocityScale;\n  uniform float lengthScale;\n#endif\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n  aniUV.y = frameTile.y - aniUV.y - 1.0;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\nattribute vec3 a_position; \nattribute vec3 a_uv;  \nattribute vec2 a_uv0; \nattribute vec4 a_color;\n#if USE_STRETCHED_BILLBOARD\nattribute vec3 a_color0; \n#endif\nvoid lpvs_main() {\n  vec4 pos = vec4(a_position, 1);\n#if USE_STRETCHED_BILLBOARD\n  vec4 velocity = vec4(a_color0.xyz, 0);\n#endif\n#if !USE_WORLD_SPACE\n  pos = model * pos;\n  #if USE_STRETCHED_BILLBOARD\n  velocity = model * velocity;\n  #endif\n#endif\n  vec2 cornerOffset = vec2((a_uv.xy - 0.5) * a_uv0.x);\n#if !USE_STRETCHED_BILLBOARD\n  \n  rotateCorner(cornerOffset, a_uv0.y);\n#endif\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , view\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , eye\n    , velocity\n    , velocityScale\n    , lengthScale\n    , a_uv0.x\n    , a_uv.x\n  #endif\n  );\n  pos = viewProj * pos;\n  uv = computeUV(a_uv.z, a_uv.xy, frameTile) * mainTiling + mainOffset;\n  color = a_color;\n  gl_Position = pos;\n}\n\nvoid main () {\n  lpvs_main();\n}',
    frag: '\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvarying vec2 uv;\nvarying vec4 color;\nvoid main () {\n  \n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  gl_FragColor = col;\n}',
    defines: [
      { name: 'USE_SOFT_PARTICLE', },
      { name: 'USE_BILLBOARD', },
      { name: 'USE_STRETCHED_BILLBOARD', },
      { name: 'USE_HORIZONTAL_BILLBOARD', },
      { name: 'USE_VERTICAL_BILLBOARD', },
      { name: 'USE_WORLD_SPACE', },
    ],
  },
  {
    name: 'particle-add-smooth',
    vert: '\n\nuniform vec2 frameTile;\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  uniform mat4 view;\n#endif\n#if USE_STRETCHED_BILLBOARD\n  uniform vec3 eye;\n  uniform float velocityScale;\n  uniform float lengthScale;\n#endif\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n  aniUV.y = frameTile.y - aniUV.y - 1.0;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\nattribute vec3 a_position; \nattribute vec3 a_uv;  \nattribute vec2 a_uv0; \nattribute vec4 a_color;\n#if USE_STRETCHED_BILLBOARD\nattribute vec3 a_color0; \n#endif\nvoid lpvs_main() {\n  vec4 pos = vec4(a_position, 1);\n#if USE_STRETCHED_BILLBOARD\n  vec4 velocity = vec4(a_color0.xyz, 0);\n#endif\n#if !USE_WORLD_SPACE\n  pos = model * pos;\n  #if USE_STRETCHED_BILLBOARD\n  velocity = model * velocity;\n  #endif\n#endif\n  vec2 cornerOffset = vec2((a_uv.xy - 0.5) * a_uv0.x);\n#if !USE_STRETCHED_BILLBOARD\n  \n  rotateCorner(cornerOffset, a_uv0.y);\n#endif\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , view\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , eye\n    , velocity\n    , velocityScale\n    , lengthScale\n    , a_uv0.x\n    , a_uv.x\n  #endif\n  );\n  pos = viewProj * pos;\n  uv = computeUV(a_uv.z, a_uv.xy, frameTile) * mainTiling + mainOffset;\n  color = a_color;\n  gl_Position = pos;\n}\n\nvoid main () {\n  lpvs_main();\n}',
    frag: '\nuniform sampler2D mainTexture;\nvarying vec2 uv;\nvarying vec4 color;\nvoid main () {\n  \n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  gl_FragColor = col;\n}',
    defines: [
      { name: 'USE_SOFT_PARTICLE', },
      { name: 'USE_BILLBOARD', },
      { name: 'USE_STRETCHED_BILLBOARD', },
      { name: 'USE_HORIZONTAL_BILLBOARD', },
      { name: 'USE_VERTICAL_BILLBOARD', },
      { name: 'USE_WORLD_SPACE', },
    ],
  },
  {
    name: 'particle-add',
    vert: '\n\nuniform vec2 frameTile;\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  uniform mat4 view;\n#endif\n#if USE_STRETCHED_BILLBOARD\n  uniform vec3 eye;\n  uniform float velocityScale;\n  uniform float lengthScale;\n#endif\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n  aniUV.y = frameTile.y - aniUV.y - 1.0;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\nattribute vec3 a_position; \nattribute vec3 a_uv;  \nattribute vec2 a_uv0; \nattribute vec4 a_color;\n#if USE_STRETCHED_BILLBOARD\nattribute vec3 a_color0; \n#endif\nvoid lpvs_main() {\n  vec4 pos = vec4(a_position, 1);\n#if USE_STRETCHED_BILLBOARD\n  vec4 velocity = vec4(a_color0.xyz, 0);\n#endif\n#if !USE_WORLD_SPACE\n  pos = model * pos;\n  #if USE_STRETCHED_BILLBOARD\n  velocity = model * velocity;\n  #endif\n#endif\n  vec2 cornerOffset = vec2((a_uv.xy - 0.5) * a_uv0.x);\n#if !USE_STRETCHED_BILLBOARD\n  \n  rotateCorner(cornerOffset, a_uv0.y);\n#endif\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , view\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , eye\n    , velocity\n    , velocityScale\n    , lengthScale\n    , a_uv0.x\n    , a_uv.x\n  #endif\n  );\n  pos = viewProj * pos;\n  uv = computeUV(a_uv.z, a_uv.xy, frameTile) * mainTiling + mainOffset;\n  color = a_color;\n  gl_Position = pos;\n}\n\nvoid main () {\n  lpvs_main();\n}',
    frag: '\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvarying vec2 uv;\nvarying vec4 color;\nvoid main () {\n  \n  gl_FragColor = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n}',
    defines: [
      { name: 'USE_SOFT_PARTICLE', },
      { name: 'USE_BILLBOARD', },
      { name: 'USE_STRETCHED_BILLBOARD', },
      { name: 'USE_HORIZONTAL_BILLBOARD', },
      { name: 'USE_VERTICAL_BILLBOARD', },
      { name: 'USE_WORLD_SPACE', },
    ],
  },
  {
    name: 'particle-alpha-blend',
    vert: '\n\nuniform vec2 frameTile;\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  uniform mat4 view;\n#endif\n#if USE_STRETCHED_BILLBOARD\n  uniform vec3 eye;\n  uniform float velocityScale;\n  uniform float lengthScale;\n#endif\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n  aniUV.y = frameTile.y - aniUV.y - 1.0;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\nattribute vec3 a_position; \nattribute vec3 a_uv;  \nattribute vec2 a_uv0; \nattribute vec4 a_color;\n#if USE_STRETCHED_BILLBOARD\nattribute vec3 a_color0; \n#endif\nvoid lpvs_main() {\n  vec4 pos = vec4(a_position, 1);\n#if USE_STRETCHED_BILLBOARD\n  vec4 velocity = vec4(a_color0.xyz, 0);\n#endif\n#if !USE_WORLD_SPACE\n  pos = model * pos;\n  #if USE_STRETCHED_BILLBOARD\n  velocity = model * velocity;\n  #endif\n#endif\n  vec2 cornerOffset = vec2((a_uv.xy - 0.5) * a_uv0.x);\n#if !USE_STRETCHED_BILLBOARD\n  \n  rotateCorner(cornerOffset, a_uv0.y);\n#endif\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , view\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , eye\n    , velocity\n    , velocityScale\n    , lengthScale\n    , a_uv0.x\n    , a_uv.x\n  #endif\n  );\n  pos = viewProj * pos;\n  uv = computeUV(a_uv.z, a_uv.xy, frameTile) * mainTiling + mainOffset;\n  color = a_color;\n  gl_Position = pos;\n}\n\nvoid main () {\n  lpvs_main();\n}',
    frag: '\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvarying vec2 uv;\nvarying vec4 color;\nvoid main () {\n  \n  gl_FragColor = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n}',
    defines: [
      { name: 'USE_SOFT_PARTICLE', },
      { name: 'USE_BILLBOARD', },
      { name: 'USE_STRETCHED_BILLBOARD', },
      { name: 'USE_HORIZONTAL_BILLBOARD', },
      { name: 'USE_VERTICAL_BILLBOARD', },
      { name: 'USE_WORLD_SPACE', },
    ],
  },
  {
    name: 'particle-premultiply-blend',
    vert: '\n\nuniform vec2 frameTile;\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  uniform mat4 view;\n#endif\n#if USE_STRETCHED_BILLBOARD\n  uniform vec3 eye;\n  uniform float velocityScale;\n  uniform float lengthScale;\n#endif\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset\n#if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#elif USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += (camRight * vertOffset.x) + (camUp * vertOffset.y);\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n  aniUV.y = frameTile.y - aniUV.y - 1.0;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\nattribute vec3 a_position; \nattribute vec3 a_uv;  \nattribute vec2 a_uv0; \nattribute vec4 a_color;\n#if USE_STRETCHED_BILLBOARD\nattribute vec3 a_color0; \n#endif\nvoid lpvs_main() {\n  vec4 pos = vec4(a_position, 1);\n#if USE_STRETCHED_BILLBOARD\n  vec4 velocity = vec4(a_color0.xyz, 0);\n#endif\n#if !USE_WORLD_SPACE\n  pos = model * pos;\n  #if USE_STRETCHED_BILLBOARD\n  velocity = model * velocity;\n  #endif\n#endif\n  vec2 cornerOffset = vec2((a_uv.xy - 0.5) * a_uv0.x);\n#if !USE_STRETCHED_BILLBOARD\n  \n  rotateCorner(cornerOffset, a_uv0.y);\n#endif\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , view\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , eye\n    , velocity\n    , velocityScale\n    , lengthScale\n    , a_uv0.x\n    , a_uv.x\n  #endif\n  );\n  pos = viewProj * pos;\n  uv = computeUV(a_uv.z, a_uv.xy, frameTile) * mainTiling + mainOffset;\n  color = a_color;\n  gl_Position = pos;\n}\n\nvoid main () {\n  lpvs_main();\n}',
    frag: '\nuniform sampler2D mainTexture;\nvarying vec2 uv;\nvarying vec4 color;\nvoid main () {\n  \n  gl_FragColor = color * texture2D(mainTexture, uv) * color.a;\n}',
    defines: [
      { name: 'USE_SOFT_PARTICLE', },
      { name: 'USE_BILLBOARD', },
      { name: 'USE_STRETCHED_BILLBOARD', },
      { name: 'USE_HORIZONTAL_BILLBOARD', },
      { name: 'USE_VERTICAL_BILLBOARD', },
      { name: 'USE_WORLD_SPACE', },
    ],
  },
  {
    name: 'pbr',
    vert: '\nattribute vec3 a_position;\nattribute vec3 a_normal;\nvarying vec3 pos_w;\nvarying vec3 normal_w;\nuniform mat4 model;\nuniform mat4 viewProj;\nuniform mat3 normalMatrix;\n#if USE_NORMAL_TEXTURE || USE_ALBEDO_TEXTURE || USE_MRA_TEXTURE || USE_METALLIC_TEXTURE || USE_ROUGHNESS_TEXTURE || USE_AO_TEXTURE || USE_EMISSIVE_TEXTURE\n  attribute vec2 a_uv0;\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n  varying vec2 uv0;\n#endif\n#if USE_SKINNING\n  \nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if USE_JOINTS_TEXTURE\nuniform sampler2D u_jointsTexture;\nuniform float u_jointsTextureSize;\nmat4 getBoneMatrix(const in float i) {\n  float size = u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n  y = dy * (y + 0.5);\n  vec4 v1 = texture2D(u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(u_jointsTexture, vec2(dx * (x + 3.5), y));\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 u_jointMatrices[128];\nmat4 getBoneMatrix(const in float i) {\n  return u_jointMatrices[int(i)];\n}\n#endif\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n#endif\n#if USE_SHADOW_MAP\n  #if NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n      uniform mat4 lightViewProjMatrix_{id};\n      uniform float minDepth_{id};\n      uniform float maxDepth_{id};\n      varying vec4 pos_lightspace_{id};\n      varying float vDepth_{id};\n    #pragma endFor\n  #endif\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_SKINNING\n    mat4 skinMat = skinMatrix();\n    pos = skinMat * pos;\n  #endif\n  pos_w = (model * pos).xyz;\n  pos = viewProj * model * pos;\n  #if USE_NORMAL_TEXTURE || USE_ALBEDO_TEXTURE || USE_MRA_TEXTURE || USE_METALLIC_TEXTURE || USE_ROUGHNESS_TEXTURE || USE_AO_TEXTURE || USE_EMISSIVE_TEXTURE\n    uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n  vec4 normal = vec4(a_normal, 0);\n  #if USE_SKINNING\n    normal = skinMat * normal;\n  #endif\n  normal_w = normalMatrix * normal.xyz;\n  #if USE_SHADOW_MAP\n    #if NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n        pos_lightspace_{id} = lightViewProjMatrix_{id} * vec4(pos_w, 1.0);\n        vDepth_{id} = (pos_lightspace_{id}.z + minDepth_{id}) / (minDepth_{id} + maxDepth_{id});\n      #pragma endFor\n    #endif\n  #endif\n  gl_Position = pos;\n}',
    frag: '\n#if USE_NORMAL_TEXTURE\n#extension GL_OES_standard_derivatives : enable\n#endif\n#if USE_TEX_LOD\n#extension GL_EXT_shader_texture_lod: enable\n#endif\n\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPSILON 1e-6\n#define LOG2 1.442695\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n#if NUM_DIR_LIGHTS > 0\n  #pragma for id in range(0, NUM_DIR_LIGHTS)\n    uniform vec3 dir_light{id}_direction;\n    uniform vec3 dir_light{id}_color;\n  #pragma endFor\n#endif\n#if NUM_POINT_LIGHTS > 0\n  #pragma for id in range(0, NUM_POINT_LIGHTS)\n    uniform vec3 point_light{id}_position;\n    uniform vec3 point_light{id}_color;\n    uniform float point_light{id}_range;\n  #pragma endFor\n#endif\n#if NUM_SPOT_LIGHTS > 0\n  #pragma for id in range(0, NUM_SPOT_LIGHTS)\n    uniform vec3 spot_light{id}_position;\n    uniform vec3 spot_light{id}_direction;\n    uniform vec3 spot_light{id}_color;\n    uniform vec2 spot_light{id}_spot;\n    uniform float spot_light{id}_range;\n  #pragma endFor\n#endif\nLightInfo computeDirectionalLighting(\n  vec3 lightDirection,\n  vec3 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection);\n  ret.radiance = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 lightPosition,\n  vec3 positionW,\n  vec3 lightColor,\n  float lightRange\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPosition - positionW;\n  float attenuation = max(0.0, 1.0 - length(lightDir) / lightRange);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor * attenuation;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 lightPosition,\n  vec3 positionW,\n  vec3 lightDirection,\n  vec3 lightColor,\n  vec2 lightSpot,\n  float lightRange\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPosition - positionW;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightRange);\n  float cosConeAngle = max(0., dot(lightDirection, -lightDir));\n  cosConeAngle = cosConeAngle < lightSpot.x ? 0.0 : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle,lightSpot.y);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor * attenuation * cosConeAngle;\n  return ret;\n}\n\nvec3 unpackNormal(vec4 nmap) {\n  return nmap.xyz * 2.0 - 1.0;\n}\nvec3 unpackRGBE(vec4 rgbe) {\n    return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\n#if USE_SHADOW_MAP\n  \nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n  \n#if NUM_SHADOW_LIGHTS > 0\n  #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n    uniform sampler2D shadowMap_{id};\n    uniform float darkness_{id};\n    uniform float depthScale_{id};\n    uniform float frustumEdgeFalloff_{id};\n    uniform float bias_{id};\n    uniform vec2 texelSize_{id};\n    varying vec4 pos_lightspace_{id};\n    varying float vDepth_{id};\n  #pragma endFor\n#endif\nfloat computeShadow(sampler2D shadowMap, vec4 pos_lightspace, float bias) {\n  vec3 projCoords = pos_lightspace.xyz / pos_lightspace.w;\n  projCoords = projCoords * 0.5 + 0.5;\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, projCoords.xy));\n  float currentDepth = projCoords.z;\n  float shadow = (currentDepth - bias > closestDepth) ? 0.0 : 1.0;\n  return shadow;\n}\nfloat computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n  float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n  return mix(esm, 1.0, mask);\n}\nfloat computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n  \n  float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n  return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n}\nfloat computeShadowPCF(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float darkness, vec2 texelSize, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float visibility = 1.0;\n  vec2 poissonDisk[4];\n  poissonDisk[0] = vec2(-0.94201624, -0.39906216);\n  poissonDisk[1] = vec2(0.94558609, -0.76890725);\n  poissonDisk[2] = vec2(-0.094184101, -0.92938870);\n  poissonDisk[3] = vec2(0.34495938, 0.29387760);\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[0] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[1] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[2] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[3] * texelSize)) < currentDepth) visibility -= 0.25;\n  return computeFallOff(min(1.0, visibility + 1.0 - darkness), projCoords, frustumEdgeFalloff);\n}\n#endif\nuniform vec3 eye;\nvarying vec3 pos_w;\nvarying vec3 normal_w;\n#if USE_NORMAL_TEXTURE || USE_ALBEDO_TEXTURE || USE_MRA_TEXTURE || USE_METALLIC_TEXTURE || USE_ROUGHNESS_TEXTURE || USE_AO_TEXTURE || USE_EMISSIVE_TEXTURE\n  varying vec2 uv0;\n#endif\n#if USE_IBL\n  uniform samplerCube diffuseEnvTexture;\n  uniform samplerCube specularEnvTexture;\n  uniform sampler2D brdfLUT;\n  #if USE_TEX_LOD\n    uniform float maxReflectionLod;\n  #endif\n#endif\nuniform vec4 albedo;\n#if USE_ALBEDO_TEXTURE\n  uniform sampler2D albedo_texture;\n#endif\n#if USE_MRA_TEXTURE\n  uniform vec2 sampler2D mra_texture;\n#endif\nuniform float metallic;\n#if USE_METALLIC_TEXTURE\n  uniform sampler2D metallic_texture;\n#endif\nuniform float roughness;\n#if USE_ROUGHNESS_TEXTURE\n  uniform sampler2D roughness_texture;\n#endif\nuniform float ao;\n#if USE_AO_TEXTURE\n  uniform sampler2D ao_texture;\n#endif\n#if USE_EMISSIVE\n  uniform vec3 emissive;\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissive_texture;\n  #endif\n#endif\n#if USE_ALPHA_TEST\n  uniform float alphaTestThreshold;\n#endif\n#if USE_NORMAL_TEXTURE\n  uniform sampler2D normal_texture;\n  \n  vec3 getNormalFromTexture() {\n    vec3 tangentNormal = texture2D(normal_texture, uv0).rgb * 2.0 - 1.0;\n    vec3 q1  = dFdx(pos_w);\n    vec3 q2  = dFdy(pos_w);\n    vec2 st1 = dFdx(uv0);\n    vec2 st2 = dFdy(uv0);\n    vec3 N   = normalize(normal_w);\n    vec3 T   = normalize(q1*st2.t - q2*st1.t);\n    vec3 B   = -normalize(cross(N, T));\n    mat3 TBN = mat3(T, B, N);\n    return normalize(TBN * tangentNormal);\n  }\n#endif\nfloat distributionGGX(vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom   = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = PI * denom * denom;\n  return nom / denom;\n}\nfloat geometrySchlickGGX(float NdotV, float roughness) {\n  float r = (roughness + 1.0);\n  float k = (r * r) / 8.0;\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n  return nom / denom;\n}\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = geometrySchlickGGX(NdotV, roughness);\n  float ggx1 = geometrySchlickGGX(NdotL, roughness);\n  return ggx1 * ggx2;\n}\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\n  float fresnel = exp2((-5.55473 * cosTheta - 6.98316) * cosTheta);\n  return F0 + (1.0 - F0) * fresnel;\n}\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  float fresnel = exp2((-5.55473 * cosTheta - 6.98316) * cosTheta);\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * fresnel;\n}\nvec3 brdf(LightInfo lightInfo, vec3 N, vec3 V, vec3 F0, vec3 albedo, float metallic, float roughness) {\n  vec3 H = normalize(V + lightInfo.lightDir);\n  float NDF = distributionGGX(N, H, roughness);\n  float G   = geometrySmith(N, V, lightInfo.lightDir, roughness);\n  vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);\n  vec3 nominator    = NDF * G * F;\n  float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, lightInfo.lightDir), 0.0) + 0.001; \n  vec3 specular = nominator / denominator;\n  \n  vec3 kS = F;\n  \n  \n  \n  vec3 kD = vec3(1.0) - kS;\n  \n  \n  \n  kD *= 1.0 - metallic;\n  float NdotL = max(dot(N, lightInfo.lightDir), 0.0);\n  return (kD * albedo / PI + specular) * lightInfo.radiance * NdotL;\n}\nvoid main() {\n  float opacity = 1.0;\n  #if USE_ALBEDO_TEXTURE\n    vec4 baseColor = albedo * gammaToLinearSpaceRGBA(texture2D(albedo_texture, uv0));\n    vec3 albedo = baseColor.rgb;\n    opacity = baseColor.a;\n  #else\n    opacity = albedo.a;\n    vec3 albedo = albedo.rgb;\n  #endif\n  #if USE_ALPHA_TEST\n    if(opacity < alphaTestThreshold) discard;\n  #endif\n  #if USE_MRA_TEXTURE\n    vec3 metalRoughness = texture2D(mra_texture, uv0).rgb;\n    float metallic = metalRoughness.r;\n    float roughness = metalRoughness.g;\n    float ao = metalRoughness.b;\n  #else\n    #if USE_METALLIC_TEXTURE\n      float metallic  = texture2D(metallic_texture, uv0).r;\n    #endif\n    #if USE_ROUGHNESS_TEXTURE\n      float roughness  = texture2D(roughness_texture, uv0).r;\n    #endif\n    #if USE_AO_TEXTURE\n      float ao  = texture2D(ao_texture, uv0).r;\n    #endif\n  #endif\n  vec3 N = normalize(normal_w);\n  #if USE_NORMAL_TEXTURE\n    N = getNormalFromTexture();\n  #endif\n  vec3 V = normalize(eye - pos_w);\n  \n  \n  vec3 F0 = vec3(0.04);\n  F0 = mix(F0, albedo, metallic);\n  \n  vec3 Lo = vec3(0.0);\n  \n  #if NUM_POINT_LIGHTS > 0\n    #pragma for id in range(0, NUM_POINT_LIGHTS)\n      LightInfo pointLight{id};\n      pointLight{id} = computePointLighting(point_light{id}_position, pos_w, point_light{id}_color, point_light{id}_range);\n      Lo += brdf(pointLight{id}, N, V, F0, albedo, metallic, roughness);\n    #pragma endFor\n  #endif\n  #if NUM_DIR_LIGHTS > 0\n    #pragma for id in range(0, NUM_DIR_LIGHTS)\n      LightInfo directionalLight{id};\n      directionalLight{id} = computeDirectionalLighting(dir_light{id}_direction, dir_light{id}_color);\n      Lo += brdf(directionalLight{id}, N, V, F0, albedo, metallic, roughness);\n    #pragma endFor\n  #endif\n  #if NUM_SPOT_LIGHTS > 0\n    #pragma for id in range(0, NUM_SPOT_LIGHTS)\n      LightInfo spotLight{id};\n      spotLight{id} = computeSpotLighting(spot_light{id}_position, pos_w, spot_light{id}_direction, spot_light{id}_color, spot_light{id}_spot, spot_light{id}_range);\n      Lo += brdf(spotLight{id}, N, V, F0, albedo, metallic, roughness);\n    #pragma endFor\n  #endif\n  #if USE_EMISSIVE\n    vec3 emissiveColor = emissive;\n    #if USE_EMISSIVE_TEXTURE\n      emissiveColor *= gammaToLinearSpaceRGB(texture2D(emissive_texture, uv0).rgb);\n    #endif\n    Lo += emissiveColor;\n  #endif\n  \n  vec3 ambient = vec3(0.03) * albedo * ao;\n  #if USE_IBL\n    \n    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n    vec3 kS = F;\n    vec3 kD = vec3(1.0) - kS;\n    kD *= 1.0 - metallic;\n    #if USE_RGBE_IBL_DIFFUSE\n      vec3 diffuseEnv = unpackRGBE(textureCube(diffuseEnvTexture, N));\n    #else\n      vec3 diffuseEnv = textureCube(diffuseEnvTexture, N).rgb;\n    #endif\n    vec3 diffuse = diffuseEnv * albedo;\n    \n    vec3 R = reflect(-V, N);\n    #if USE_TEX_LOD\n      #if USE_RGBE_IBL_SPECULAR\n        vec3 specularEnv = unpackRGBE(textureCubeLodEXT(specularEnvTexture, R, roughness * maxReflectionLod));\n      #else\n        vec3 specularEnv = textureCubeLodEXT(specularEnvTexture, R, roughness * maxReflectionLod).rgb;\n      #endif\n    #else\n      #if USE_RGBE_IBL_SPECULAR\n        vec3 specularEnv = unpackRGBE(textureCube(specularEnvTexture, R));\n      #else\n        vec3 specularEnv = textureCube(specularEnvTexture, R).rgb;\n      #endif\n    #endif\n    vec2 brdf  = texture2D(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;\n    vec3 specular = specularEnv * (F * brdf.x + brdf.y);\n    ambient = (kD * diffuse + specular) * ao;\n  #endif\n  #if USE_SHADOW_MAP\n    float shadow = 1.0;\n    #if NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n        shadow *= computeShadowESM(shadowMap_{id}, pos_lightspace_{id}, vDepth_{id}, depthScale_{id}, darkness_{id}, frustumEdgeFalloff_{id});\n      #pragma endFor\n    #endif\n    vec3 color = (ambient + Lo) * shadow;\n  #else\n    vec3 color = ambient + Lo;\n  #endif\n  \n  color = color / (color + vec3(1.0));\n  \n  vec4 finalColor = vec4(color, opacity);\n  gl_FragColor = linearToGammaSpaceRGBA(finalColor);\n}',
    defines: [
      { name: 'USE_NORMAL_TEXTURE', },
      { name: 'USE_ALBEDO_TEXTURE', },
      { name: 'USE_METALLIC_ROUGHNESS_TEXTURE', },
      { name: 'USE_METALLIC_TEXTURE', },
      { name: 'USE_ROUGHNESS_TEXTURE', },
      { name: 'USE_AO_TEXTURE', },
      { name: 'USE_EMISSIVE', },
      { name: 'USE_EMISSIVE_TEXTURE', },
      { name: 'USE_IBL', },
      { name: 'USE_TEX_LOD', },
      { name: 'USE_ALPHA_TEST', },
      { name: 'USE_SHADOW_MAP', },
      { name: 'USE_SKINNING', },
      { name: 'NUM_DIR_LIGHTS', min: 0, max: 4, },
      { name: 'NUM_POINT_LIGHTS', min: 0, max: 4, },
      { name: 'NUM_SPOT_LIGHTS', min: 0, max: 4, },
      { name: 'NUM_SHADOW_LIGHTS', min: 0, max: 4, },
    ],
  },
  {
    name: 'phong',
    vert: '\nattribute vec3 a_position;\nattribute vec3 a_normal;\nuniform mat4 model;\nuniform mat4 viewProj;\nuniform mat3 normalMatrix;\nvarying vec3 normal_w;\nvarying vec3 pos_w;\n#if USE_NORMAL_TEXTURE || USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE\n  attribute vec2 a_uv0;\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n  varying vec2 uv0;\n#endif\n#if USE_SKINNING\n  \nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if USE_JOINTS_TEXTURE\nuniform sampler2D u_jointsTexture;\nuniform float u_jointsTextureSize;\nmat4 getBoneMatrix(const in float i) {\n  float size = u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n  y = dy * (y + 0.5);\n  vec4 v1 = texture2D(u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(u_jointsTexture, vec2(dx * (x + 3.5), y));\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 u_jointMatrices[128];\nmat4 getBoneMatrix(const in float i) {\n  return u_jointMatrices[int(i)];\n}\n#endif\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n#endif\n#if USE_SHADOW_MAP\n  #if NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n      uniform mat4 lightViewProjMatrix_{id};\n      uniform float minDepth_{id};\n      uniform float maxDepth_{id};\n      varying vec4 pos_lightspace_{id};\n      varying float vDepth_{id};\n    #pragma endFor\n  #endif\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_SKINNING\n    mat4 skinMat = skinMatrix();\n    pos = skinMat * pos;\n  #endif\n  pos_w = (model * pos).xyz;\n  pos = viewProj * model * pos;\n  #if USE_NORMAL_TEXTURE || USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE\n    uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n  vec4 normal = vec4(a_normal, 0);\n  #if USE_SKINNING\n    normal = skinMat * normal;\n  #endif\n  normal_w = normalMatrix * normal.xyz;\n  #if USE_SHADOW_MAP\n    #if NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n        pos_lightspace_{id} = lightViewProjMatrix_{id} * vec4(pos_w, 1.0);\n        vDepth_{id} = (pos_lightspace_{id}.z + minDepth_{id}) / (minDepth_{id} + maxDepth_{id});\n      #pragma endFor\n    #endif\n  #endif\n  gl_Position = pos;\n}',
    frag: '\n#if USE_NORMAL_TEXTURE\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPSILON 1e-6\n#define LOG2 1.442695\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n\nstruct LightInfo {\n  vec3 diffuse;\n  vec3 specular;\n};\nLightInfo computeDirectionalLighting(\n  vec3 lightDirection,\n  vec3 lightColor,\n  vec3 normal,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo lightingResult;\n  float ndl = 0.0;\n  float ndh = 0.0;\n  vec3 lightDir = -normalize(lightDirection);\n  ndl = max(0.0, dot(normal, lightDir));\n  lightingResult.diffuse = lightColor * ndl;\n  vec3 dirH = normalize(viewDirection + lightDir);\n  ndh = max(0.0, dot(normal, dirH));\n  ndh = (ndl == 0.0) ? 0.0: ndh;\n  ndh = pow(ndh, max(1.0, glossiness * 128.0));\n  lightingResult.specular = lightColor * ndh;\n  return lightingResult;\n}\nLightInfo computePointLighting(\n  vec3 lightPosition,\n  vec3 lightColor,\n  float lightRange,\n  vec3 normal,\n  vec3 positionW,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo lightingResult;\n  float ndl = 0.0;\n  float ndh = 0.0;\n  vec3 lightDir = vec3(0, 0, 0);\n  float attenuation = 1.0;\n  lightDir = lightPosition - positionW;\n  attenuation = max(0., 1.0 - length(lightDir) / lightRange);\n  lightDir = normalize(lightDir);\n  ndl = max(0.0, dot(normal, lightDir));\n  lightingResult.diffuse = lightColor * ndl * attenuation;\n  vec3 dirH = normalize(viewDirection + lightDir);\n  ndh = max(0.0, dot(normal, dirH));\n  ndh = (ndl == 0.0) ? 0.0: ndh;\n  ndh = pow(ndh, max(1.0, glossiness * 128.0));\n  lightingResult.specular = lightColor * ndh * attenuation;\n  return lightingResult;\n}\nLightInfo computeSpotLighting(\n  vec3 lightPosition,\n  vec3 lightDirection,\n  vec3 lightColor,\n  float lightRange,\n  vec2 lightSpot,\n  vec3 normal,\n  vec3 positionW,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo lightingResult;\n  float ndl = 0.0;\n  float ndh = 0.0;\n  vec3 lightDir = vec3(0, 0, 0);\n  float attenuation = 1.0;\n  float cosConeAngle = 1.0;\n  lightDir = lightPosition - positionW;\n  attenuation = max(0., 1.0 - length(lightDir) / lightRange);\n  lightDir = normalize(lightDir);\n  cosConeAngle = max(0., dot(lightDirection, -lightDir));\n  cosConeAngle = cosConeAngle < lightSpot.x ? 0.0 : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle,lightSpot.y);\n  ndl = max(0.0, dot(normal, lightDir));\n  lightingResult.diffuse = lightColor * ndl * attenuation * cosConeAngle;\n  vec3 dirH = normalize(viewDirection + lightDir);\n  ndh = max(0.0, dot(normal, dirH));\n  ndh = (ndl == 0.0) ? 0.0: ndh;\n  ndh = pow(ndh, max(1.0, glossiness * 128.0));\n  lightingResult.specular = lightColor * ndh * attenuation * cosConeAngle;\n  return lightingResult;\n}\n#if NUM_DIR_LIGHTS > 0\n  #pragma for id in range(0, NUM_DIR_LIGHTS)\n    uniform vec3 dir_light{id}_direction;\n    uniform vec3 dir_light{id}_color;\n  #pragma endFor\n#endif\n#if NUM_POINT_LIGHTS > 0\n  #pragma for id in range(0, NUM_POINT_LIGHTS)\n    uniform vec3 point_light{id}_position;\n    uniform vec3 point_light{id}_color;\n    uniform float point_light{id}_range;\n  #pragma endFor\n#endif\n#if NUM_SPOT_LIGHTS > 0\n  #pragma for id in range(0, NUM_SPOT_LIGHTS)\n    uniform vec3 spot_light{id}_position;\n    uniform vec3 spot_light{id}_direction;\n    uniform vec3 spot_light{id}_color;\n    uniform float spot_light{id}_range;\n    uniform vec2 spot_light{id}_spot;\n  #pragma endFor\n#endif\nLightInfo getPhongLighting(\n  vec3 normal,\n  vec3 positionW,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  LightInfo dirLighting;\n  #if NUM_DIR_LIGHTS > 0\n    #pragma for id in range(0, NUM_DIR_LIGHTS)\n      dirLighting = computeDirectionalLighting(dir_light{id}_direction,dir_light{id}_color,normal, viewDirection, glossiness);\n      result.diffuse += dirLighting.diffuse;\n      result.specular += dirLighting.specular;\n    #pragma endFor\n  #endif\n  LightInfo pointLighting;\n  #if NUM_POINT_LIGHTS > 0\n    #pragma for id in range(0, NUM_POINT_LIGHTS)\n      pointLighting = computePointLighting(point_light{id}_position, point_light{id}_color, point_light{id}_range,\n                                          normal, positionW, viewDirection, glossiness);\n      result.diffuse += pointLighting.diffuse;\n      result.specular += pointLighting.specular;\n    #pragma endFor\n  #endif\n  LightInfo spotLighting;\n  #if NUM_SPOT_LIGHTS > 0\n    #pragma for id in range(0, NUM_SPOT_LIGHTS)\n      spotLighting = computeSpotLighting(spot_light{id}_position, spot_light{id}_direction, spot_light{id}_color,\n                      spot_light{id}_range, spot_light{id}_spot,normal, positionW, viewDirection, glossiness);\n      result.diffuse += spotLighting.diffuse;\n      result.specular += spotLighting.specular;\n    #pragma endFor\n  #endif\n  return result;\n}\n\n#if USE_SHADOW_MAP\n  \nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n  \n#if NUM_SHADOW_LIGHTS > 0\n  #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n    uniform sampler2D shadowMap_{id};\n    uniform float darkness_{id};\n    uniform float depthScale_{id};\n    uniform float frustumEdgeFalloff_{id};\n    uniform float bias_{id};\n    uniform vec2 texelSize_{id};\n    varying vec4 pos_lightspace_{id};\n    varying float vDepth_{id};\n  #pragma endFor\n#endif\nfloat computeShadow(sampler2D shadowMap, vec4 pos_lightspace, float bias) {\n  vec3 projCoords = pos_lightspace.xyz / pos_lightspace.w;\n  projCoords = projCoords * 0.5 + 0.5;\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, projCoords.xy));\n  float currentDepth = projCoords.z;\n  float shadow = (currentDepth - bias > closestDepth) ? 0.0 : 1.0;\n  return shadow;\n}\nfloat computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n  float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n  return mix(esm, 1.0, mask);\n}\nfloat computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n  \n  float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n  return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n}\nfloat computeShadowPCF(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float darkness, vec2 texelSize, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float visibility = 1.0;\n  vec2 poissonDisk[4];\n  poissonDisk[0] = vec2(-0.94201624, -0.39906216);\n  poissonDisk[1] = vec2(0.94558609, -0.76890725);\n  poissonDisk[2] = vec2(-0.094184101, -0.92938870);\n  poissonDisk[3] = vec2(0.34495938, 0.29387760);\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[0] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[1] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[2] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[3] * texelSize)) < currentDepth) visibility -= 0.25;\n  return computeFallOff(min(1.0, visibility + 1.0 - darkness), projCoords, frustumEdgeFalloff);\n}\n#endif\nuniform vec3 eye;\nuniform vec3 sceneAmbient;\nvarying vec3 normal_w;\nvarying vec3 pos_w;\n#if USE_NORMAL_TEXTURE || USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE\n  varying vec2 uv0;\n#endif\nstruct phongMaterial\n{\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float glossiness;\n  float opacity;\n};\nuniform vec4 diffuseColor;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuse_texture;\n#endif\n#if USE_EMISSIVE\n  uniform vec3 emissiveColor;\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissive_texture;\n  #endif\n#endif\n#if USE_SPECULAR\n  uniform vec3 specularColor;\n  uniform float glossiness;\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specular_texture;\n  #endif\n#endif\n#if USE_NORMAL_TEXTURE\n  uniform sampler2D normal_texture;\n  uniform float normalScale;  \n  vec3 getNormal(vec3 pos, vec3 normal) {\n    vec3 q0 = vec3( dFdx( pos.x ), dFdx( pos.y ), dFdx( pos.z ) );\n    vec3 q1 = vec3( dFdy( pos.x ), dFdy( pos.y ), dFdy( pos.z ) );\n    vec2 st0 = dFdx( uv0.st );\n    vec2 st1 = dFdy( uv0.st );\n    vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n    vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n    vec3 N = normal;\n    vec3 mapN = texture2D(normal_texture, uv0).rgb * 2.0 - 1.0;\n    mapN.xy = 1.0 * mapN.xy;\n    mat3 tsn = mat3( S, T, N );\n    return normalize( tsn * mapN );\n  }\n#endif\n#if USE_ALPHA_TEST\n  uniform float alphaTestThreshold;\n#endif\nphongMaterial getPhongMaterial() {\n  phongMaterial result;\n  #if USE_DIFFUSE_TEXTURE\n    vec4 baseColor = diffuseColor * gammaToLinearSpaceRGBA(texture2D(diffuse_texture, uv0));\n    result.diffuse = baseColor.rgb;\n    result.opacity = baseColor.a;\n  #else\n    result.diffuse = diffuseColor.rgb;\n    result.opacity = diffuseColor.a;\n  #endif\n  #if USE_EMISSIVE\n    result.emissive = gammaToLinearSpaceRGB(emissiveColor);\n    #if USE_EMISSIVE_TEXTURE\n      result.emissive *= gammaToLinearSpaceRGB(texture2D(emissive_texture, uv0).rgb);\n    #endif\n  #endif\n  #if USE_SPECULAR\n    result.specular = gammaToLinearSpaceRGB(specularColor);\n    #if USE_SPECULAR_TEXTURE\n      result.specular = gammaToLinearSpaceRGB(texture2D(specular_texture, uv0).rgb);\n    #endif\n    result.glossiness = glossiness;\n  #endif\n  return result;\n}\nvec4 composePhongShading(LightInfo lighting, phongMaterial mtl, float shadow)\n{\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  \n  o.xyz = lighting.diffuse * mtl.diffuse;\n  #if USE_EMISSIVE\n    o.xyz += mtl.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.xyz += lighting.specular * mtl.specular;\n  #endif\n  o.xyz *= shadow;\n  o.w = mtl.opacity;\n  return o;\n}\nvoid main () {\n  LightInfo phongLighting;\n  vec3 viewDirection = normalize(eye - pos_w);\n  phongMaterial mtl = getPhongMaterial();\n  #if USE_ALPHA_TEST\n    if(mtl.opacity < alphaTestThreshold) discard;\n  #endif\n  vec3 normal = normalize(normal_w);\n  #if USE_NORMAL_TEXTURE\n    normal = getNormal(pos_w, normal);\n  #endif\n  phongLighting = getPhongLighting(normal, pos_w, viewDirection, mtl.glossiness);\n  phongLighting.diffuse += sceneAmbient;\n  #if USE_SHADOW_MAP\n    float shadow = 1.0;\n    #if NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, NUM_SHADOW_LIGHTS)\n        shadow *= computeShadowESM(shadowMap_{id}, pos_lightspace_{id}, vDepth_{id}, depthScale_{id}, darkness_{id}, frustumEdgeFalloff_{id});\n      #pragma endFor\n    #endif\n    vec4 finalColor = composePhongShading(phongLighting, mtl, shadow);\n  #else\n    vec4 finalColor = composePhongShading(phongLighting, mtl, 1.0);\n  #endif\n  gl_FragColor = linearToGammaSpaceRGBA(finalColor);\n}',
    defines: [
      { name: 'USE_NORMAL_TEXTURE', },
      { name: 'USE_DIFFUSE_TEXTURE', },
      { name: 'USE_SPECULAR', },
      { name: 'USE_SPECULAR_TEXTURE', },
      { name: 'USE_EMISSIVE', },
      { name: 'USE_EMISSIVE_TEXTURE', },
      { name: 'USE_ALPHA_TEST', },
      { name: 'USE_SKINNING', },
      { name: 'USE_SHADOW_MAP', },
      { name: 'NUM_DIR_LIGHTS', min: 0, max: 4, },
      { name: 'NUM_POINT_LIGHTS', min: 0, max: 4, },
      { name: 'NUM_SPOT_LIGHTS', min: 0, max: 4, },
      { name: 'NUM_SHADOW_LIGHTS', min: 0, max: 4, },
    ],
  },
  {
    name: 'shadow-depth',
    vert: '\nattribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 lightViewProjMatrix;\nuniform float minDepth;\nuniform float maxDepth;\nuniform float bias;\nvarying float vDepth;\n#if USE_SKINNING\n  \nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if USE_JOINTS_TEXTURE\nuniform sampler2D u_jointsTexture;\nuniform float u_jointsTextureSize;\nmat4 getBoneMatrix(const in float i) {\n  float size = u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n  y = dy * (y + 0.5);\n  vec4 v1 = texture2D(u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(u_jointsTexture, vec2(dx * (x + 3.5), y));\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 u_jointMatrices[128];\nmat4 getBoneMatrix(const in float i) {\n  return u_jointMatrices[int(i)];\n}\n#endif\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_SKINNING\n    mat4 skinMat = skinMatrix();\n    pos = skinMat * pos;\n  #endif\n  gl_Position = lightViewProjMatrix * model * pos;\n  \n  vDepth = ((gl_Position.z + minDepth) / (minDepth + maxDepth)) + bias;\n}',
    frag: '\nuniform float depthScale;\nvarying float vDepth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nvoid main() {\n  \n  \n  gl_FragColor = packDepthToRGBA(vDepth);\n  \n  \n}',
    defines: [
      { name: 'USE_SKINNING', },
    ],
  },
  {
    name: 'simple',
    vert: '\nattribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 uv0;\n#endif\nvoid main () {\n  vec4 pos = viewProj * model * vec4(a_position, 1);\n  #if USE_TEXTURE\n    uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}',
    frag: '\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying vec2 uv0;\n#endif\n#if USE_COLOR\n  uniform vec4 color;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture2D(texture, uv0);\n  #endif\n  #if USE_COLOR\n    o *= color;\n  #endif\n  if (!gl_FrontFacing) {\n    o.rgb *= 0.5;\n  }\n  gl_FragColor = o;\n}',
    defines: [
      { name: 'USE_TEXTURE', },
      { name: 'USE_COLOR', },
    ],
  },
  {
    name: 'skybox',
    vert: '\nattribute vec3 a_position;\nuniform mat4 view;\nuniform mat4 proj;\nvarying vec3 viewDir;\nvoid main() {\n  mat4 rotView = mat4(mat3(view));\n  vec4 clipPos = proj * rotView * vec4(a_position, 1.0);\n  gl_Position = clipPos.xyww;\n  viewDir = a_position;\n}\n',
    frag: '\nvarying vec3 viewDir;\nuniform samplerCube cubeMap;\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n\nvec3 unpackNormal(vec4 nmap) {\n  return nmap.xyz * 2.0 - 1.0;\n}\nvec3 unpackRGBE(vec4 rgbe) {\n    return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvoid main() {\n#if USE_RGBE_CUBEMAP\n    vec3 c = unpackRGBE(textureCube(cubeMap, viewDir));\n    c = linearToGammaSpaceRGB(c / (1.0 + c));\n    gl_FragColor = vec4(c, 1.0);\n#else\n    gl_FragColor = textureCube(cubeMap, viewDir);\n#endif\n}',
    defines: [],
  },
  {
    name: 'sprite',
    vert: '\nattribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\nattribute vec2 a_uv0;\nattribute vec4 a_color;\nvarying vec2 uv0;\nvarying vec4 color;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = viewProj * model * pos;\n  uv0 = a_uv0;\n  color = a_color;\n  gl_Position = pos;\n}',
    frag: '\nuniform sampler2D mainTexture;\nvarying vec2 uv0;\nvarying vec4 color;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(mainTexture, uv0);\n  o *= color;\n  gl_FragColor = o;\n}',
    defines: [],
  },
  {
    name: 'unlit',
    vert: '\nattribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n  varying vec2 uv0;\n#endif\n#if USE_SKINNING\n  \nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if USE_JOINTS_TEXTURE\nuniform sampler2D u_jointsTexture;\nuniform float u_jointsTextureSize;\nmat4 getBoneMatrix(const in float i) {\n  float size = u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n  y = dy * (y + 0.5);\n  vec4 v1 = texture2D(u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(u_jointsTexture, vec2(dx * (x + 3.5), y));\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 u_jointMatrices[128];\nmat4 getBoneMatrix(const in float i) {\n  return u_jointMatrices[int(i)];\n}\n#endif\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_SKINNING\n    pos = skinMatrix() * pos;\n  #endif\n  pos = viewProj * model * pos;\n  #if USE_TEXTURE\n    uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n  gl_Position = pos;\n}',
    frag: '\n#if USE_TEXTURE\n  uniform sampler2D mainTexture;\n  varying vec2 uv0;\n#endif\n#if USE_COLOR\n  uniform vec4 color;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, uv0);\n  #endif\n  #if USE_COLOR\n    o *= color;\n  #endif\n  gl_FragColor = o;\n}',
    defines: [
      { name: 'USE_TEXTURE', },
      { name: 'USE_COLOR', },
      { name: 'USE_SKINNING', },
    ],
  },
  {
    name: 'wireframe',
    vert: '\nattribute vec3 a_position;\nattribute vec3 a_normal;\nuniform mat4 model, viewProj;\nuniform mat3 normalMatrix;\nvarying vec3 position_w;\nvarying vec3 normal_w;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  position_w = (model * pos).xyz;\n  pos = viewProj * model * pos;\n  normal_w = normalMatrix * a_normal.xyz;\n  gl_Position = pos;\n}',
    frag: '\nuniform vec3 eye;\nuniform vec3 color;\nvarying vec3 position_w;\nvarying vec3 normal_w;\nvoid main () {\n  gl_FragColor = vec4(color, 1.0);\n  vec3 V = normalize(eye - position_w);\n  if (dot (normal_w, V) <= 0.0) {\n    gl_FragColor.rgb *= 0.6;\n  }\n}',
    defines: [],
  },
];